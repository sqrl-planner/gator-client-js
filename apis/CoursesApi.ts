/* tslint:disable */
/* eslint-disable */
/**
 * Gator API
 * A RESTful API for Gator
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Course,
  CoursePage,
} from '../models';
import {
    CourseFromJSON,
    CourseToJSON,
    CoursePageFromJSON,
    CoursePageToJSON,
} from '../models';

export interface GetCourseRequest {
    id: string;
    xFields?: string;
}

export interface ListCoursesRequest {
    ids?: Array<string>;
    lastId?: string;
    pageSize?: number;
    xFields?: string;
}

/**
 * 
 */
export class CoursesApi extends runtime.BaseAPI {

    /**
     * Fetch the course with the given id
     */
    async getCourseRaw(requestParameters: GetCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Course>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCourse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xFields !== undefined && requestParameters.xFields !== null) {
            headerParameters['X-Fields'] = String(requestParameters.xFields);
        }

        const response = await this.request({
            path: `/courses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseFromJSON(jsonValue));
    }

    /**
     * Fetch the course with the given id
     */
    async getCourse(requestParameters: GetCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Course> {
        const response = await this.getCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Accepts query parameters:     page_size: number of items to return per page (default: 20).     last_id: id of the last item returned. If not specified, returns the first page.     ids: comma-separated list of ids to filter by. If specified, returns only those courses         with the given ids in the order specified. Ignore courses that could not be found.         If not specified, returns all courses, in no particular order.  Returns:     A dictionary containing the following keys:         courses: A list of courses up to the specified page size.         last_id: The id of the last item returned.
     * List all courses
     */
    async listCoursesRaw(requestParameters: ListCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoursePage>> {
        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.lastId !== undefined) {
            queryParameters['last_id'] = requestParameters.lastId;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xFields !== undefined && requestParameters.xFields !== null) {
            headerParameters['X-Fields'] = String(requestParameters.xFields);
        }

        const response = await this.request({
            path: `/courses/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoursePageFromJSON(jsonValue));
    }

    /**
     * Accepts query parameters:     page_size: number of items to return per page (default: 20).     last_id: id of the last item returned. If not specified, returns the first page.     ids: comma-separated list of ids to filter by. If specified, returns only those courses         with the given ids in the order specified. Ignore courses that could not be found.         If not specified, returns all courses, in no particular order.  Returns:     A dictionary containing the following keys:         courses: A list of courses up to the specified page size.         last_id: The id of the last item returned.
     * List all courses
     */
    async listCourses(requestParameters: ListCoursesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoursePage> {
        const response = await this.listCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
