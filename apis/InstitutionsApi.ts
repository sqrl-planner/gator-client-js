/* tslint:disable */
/* eslint-disable */
/**
 * Gator API
 * A RESTful API for Gator
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Institution,
  InstitutionPage,
} from '../models';
import {
    InstitutionFromJSON,
    InstitutionToJSON,
    InstitutionPageFromJSON,
    InstitutionPageToJSON,
} from '../models';

export interface GetInstitutionRequest {
    code: string;
    xFields?: string;
}

export interface ListInstitutionsRequest {
    lastId?: string;
    pageSize?: number;
    xFields?: string;
}

/**
 * 
 */
export class InstitutionsApi extends runtime.BaseAPI {

    /**
     * Args:     code: The code of the institution.
     * Fetch the institution with the given code
     */
    async getInstitutionRaw(requestParameters: GetInstitutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Institution>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getInstitution.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xFields !== undefined && requestParameters.xFields !== null) {
            headerParameters['X-Fields'] = String(requestParameters.xFields);
        }

        const response = await this.request({
            path: `/institutions/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstitutionFromJSON(jsonValue));
    }

    /**
     * Args:     code: The code of the institution.
     * Fetch the institution with the given code
     */
    async getInstitution(requestParameters: GetInstitutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Institution> {
        const response = await this.getInstitutionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Accepts query parameters:     page_size: number of items to return per page (default: 20).     last_id: id of the last item returned. If not specified, returns the first page.  Returns:     A dictionary containing the following keys:         institutions: A list of institutions up to the specified page size.         last_id: The id of the last item returned.
     * List all institutions
     */
    async listInstitutionsRaw(requestParameters: ListInstitutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstitutionPage>> {
        const queryParameters: any = {};

        if (requestParameters.lastId !== undefined) {
            queryParameters['last_id'] = requestParameters.lastId;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xFields !== undefined && requestParameters.xFields !== null) {
            headerParameters['X-Fields'] = String(requestParameters.xFields);
        }

        const response = await this.request({
            path: `/institutions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstitutionPageFromJSON(jsonValue));
    }

    /**
     * Accepts query parameters:     page_size: number of items to return per page (default: 20).     last_id: id of the last item returned. If not specified, returns the first page.  Returns:     A dictionary containing the following keys:         institutions: A list of institutions up to the specified page size.         last_id: The id of the last item returned.
     * List all institutions
     */
    async listInstitutions(requestParameters: ListInstitutionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstitutionPage> {
        const response = await this.listInstitutionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
